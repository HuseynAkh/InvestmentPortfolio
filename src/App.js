import './App.css';
import CoinList from './components/CoinList/CoinList';
import AccountBalance from './components/AccountBalance/AccountBalance';
import AppHeader from './components/Header/AppHeader';
import styled from 'styled-components';
import React from 'react';
import axios from 'axios';


const Div = styled.div`
  text-align: center;
  background-color: rgb(18, 196, 228);
`

const COIN_COUNT = 20;
const formatPrice = price => parseFloat(Number(price).toFixed(3));

class App extends React.Component {
  // Auto-generated by default
  // constructor(props){
  //   super(props);
  // }
  
  state = {
    balance: 10000,
    showBalance: true,
    coinData: []
  }

  classProperty = 'value';

  componentDidMount = async () => {
    const response = await axios.get('https://api.coinpaprika.com/v1/coins');
    const coinIDs = response.data.slice(0, COIN_COUNT).map(coin => coin.id);
    const tickerURL = 'https://api.coinpaprika.com/v1/tickers/';
    const promises = coinIDs.map(id => axios.get(tickerURL + id));
    const coinData = await Promise.all(promises);
    const coinPriceData = coinData.map(function(response) {
      const coin = response.data;
      return {
        key: coin.id,
        id: coin.id,
        name: coin.name,
        ticker: coin.symbol,
        balance: 0,
        price: formatPrice(coin.quotes['USD'].price),
      };
    })
    // Retrieving prices
    this.setState({ coinData: coinPriceData });

  } 


  handleBalanceVis = () => {
    this.setState( function(oldState) {
      return {
        ...oldState,
        showBalance: !oldState.showBalance
      }
    })
  }


  handleRefresh = async (valueChangeID) => {
    const newData = await axios.get(`https://api.coinpaprika.com/v1/tickers/${valueChangeID}`);
    console.log(valueChangeID);
    
    const newCoinData = this.state.coinData.map( function(values) {
      let newValues = { ...values };
      if( valueChangeID === newValues.id) {
        newValues.price = formatPrice(newData.data.quotes['USD'].price);
      };
      return newValues;
    });
    this.setState({ coinData: newCoinData})
  }


  render(){

    return (
      <Div>
        <AppHeader />
        <AccountBalance 
        amount = {this.state.balance} 
        showBalance={this.state.showBalance} 
        handleBalanceVis={this.handleBalanceVis}/>

        <CoinList 
        coinData = {this.state.coinData}
        showBalance={this.state.showBalance} 
        handleRefresh={this.handleRefresh} />
      </Div>
    );
  }
}

export default App;
